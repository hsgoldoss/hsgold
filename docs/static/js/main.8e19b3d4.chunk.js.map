{"version":3,"sources":["logo.png","server.js","component/SelectAccount.js","Lang.js","App.js","component/contract.js","serviceWorker.js","index.js"],"names":["module","exports","host","Axios","api","bizData","pageData","callback","data","base","timestamp","sign","biz","page","axios","post","then","response","catch","error","_method","_params","id","jsonrpc","method","params","console","log","tmpPkr","Option","pullup","Pullup","setProvider","providers","HttpProvider","SelectAccount","props","handleOk","e","that","accounts","state","ac","MainPKr","selectAccount","hiddenAccount","handleCancel","onChange","v","accountOptions","this","getAccounts","res","local","accountList","dataArray","i","tmpArr","acName","Name","push","value","key","PK","setState","title","visible","onOk","onCancel","showSearch","style","width","placeholder","Component","Lang","zh_CN","project","totalSupply","contractAddress","balanceSero","balanceAsnow","rate","account","utxo","contract","swith","estimatedTotal","dayIncome","staticIncome","withdraw","detail","referId","areaId","totalInvest","profitLevel","latestTime","totalReturn","totalReturnDay","recommend","ticket","staticIncomeTips","staticIncomeTips2","investDetail","myIncome","areaTotal","areaOtherTotal","staticReward","recommendReward","nobilityReward","vipReward","viewCode","button","deposit","buy","invest","buyTicket","trigger","close","copy","modal","buyAsnow","amount","amountPlace","exchange","password","passwordPlace","amountTips","availableFPRS","availableAsnow","availableExchange","total","estimate","tips","toast","lessAmount","lessTicket","lessAsnow","minInvest","tx","copySuccess","en_US","ct","address","abi","Language","Header","Content","Footer","ajax","ABI","serojs","callContract","decimal","BigNumber","pow","Countdown","openNotificationWithIcon","type","message","desc","notification","description","wordBreak","whiteSpace","wordWrap","duration","BuyAsnowForm","create","name","asnow","confirmLoading","inputSero","dividedBy","toFixed","onCreate","getFieldDecorator","form","lang","setTimeout","layout","Item","label","rules","required","min","step","allowClear","autoComplete","color","React","InvestForm","estimateReturn","estimateLevel","ticketSero","ticketAsnow","times","parseFloat","sero","setFieldsValue","disabled","precision","max","staticTotal","multipliedBy","BuyTicketForm","ContentPage","currentAccount","showAccountSelect","loading","localStorage","setItem","window","location","reload","checked","showDeposit","handleBuyAsnowCancel","showBuyAsnow","handleBuyAsnowCreate","cb","formRef","validateFields","err","values","getFieldValue","executeMethod","toString","resetFields","saveBuyAsnowFormRef","handleInvestCancel","showInvest","handleInvestCreate","formRef2","amountSero","ct_rate","ct_details","comparedTo","warn","asnowBalances","calcuPrincipalProfit","seroHex","callMethod","saveInvestFormRef","handleBuyTicketCancel","showBuyTicket","handleBuyTicketCreate","formRef5","saveBuyTicketFormRef","showShareProfit","showWithdraw","modal1Visible","ct_balance_sero","ct_balanceOfSero","ct_balance_asnow","ct_id","getItem","showSelectAccount","getDetail","getRate","getContractBalance","getContractSeroBalance","setInterval","getAccount","pk","canvas","document","getElementById","QRCode","toCanvas","postSeroRpc","result","tkn","FPRS","HSGOLD","accountDetail","strMap","Map","balanceObj","Balance","Object","keys","currency","set","identicon","largeAreaId","largeAreaTotal","returnAmount","achievement","recommendNum","parseInt","star","isKing","balanceOfAsnow","detailsOfIncome","calcuStaticProfit","length","point","args","packData","callParams","from","to","callData","call","unPackData","cy","executeData","gas_price","estimateParam","estimateGas","executeContract","accountName","staticTimestamp","countDown","d","Date","setTime","getTime","year","getUTCFullYear","month","getUTCMonth","day","getUTCDate","tz","getTimezoneOffset","nextShareTime","a","b","showCountDown","className","marginTop","padding","background","minHeight","body","clientHeight","float","textAlign","span","onClick","dayProfit","suffix","format","onFinish","shareProfit","minus","itemLayout","size","rowKey","avatar","Meta","shape","src","substring","count","valueStyle","dashed","dateTimestamp","cDate","appendZero","getMonth","getDate","getHours","getMinutes","convertUTCDate","footer","getContainer","success","wrappedComponentRef","App","changeLocale","localeValue","target","locale","zhCN","enUS","logo","Group","Button","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8e19b3d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.02f691ae.png\";","import axios from 'axios';\n\nlet host = \"http://127.0.0.1:2345/\";\n\nclass Axios {\n\n    post(api, bizData, pageData, callback) {\n        let data = {\n            base: {\n                timestamp: 1234567,\n                sign: \"67ff54447b89f06fe4408b89902e585167abad291ec41118167017925e24e320\",\n            },\n            biz: bizData,\n            page: pageData,\n        }\n        axios.post(host + api, data).then(function (response) {\n            let data = response.data\n            if (callback) {\n                callback(data);\n            }\n        }).catch(function (error) {\n\n        })\n    }\n\n    postSeroRpc(_method, _params, callback) {\n        let data = {\n            id: 0,\n            jsonrpc: \"2.0\",\n            method: _method,\n            params: _params,\n        };\n        axios.post(host + \"rpc\", data).then(function (response) {\n            let data = response.data\n            if (callback) {\n                callback(data);\n            }\n        }).catch(function (error) {\n            console.log(\"req error: \",error)\n        })\n    }\n\n    postPullupRpc(_method, _params, callback) {\n        let data = {\n            id: 0,\n            method: _method,\n            params: _params,\n        };\n        axios.post(host + \"pullup_rpc\", data).then(function (response) {\n            let data = response.data\n            if (callback) {\n                callback(data);\n            }\n        }).catch(function (error) {\n\n        })\n    }\n\n}\n\nexport default Axios;","import React, {Component} from 'react'\nimport {Modal, Select} from \"antd\";\nimport Axios from \"../server\";\nimport Pullup from \"pullup-js-sdk\";\n\nlet tmpPkr = '';\nlet ajax = new Axios();\nconst {Option} = Select;\n\nvar pullup = new Pullup();\npullup.setProvider(new pullup.providers.HttpProvider('http://127.0.0.1:2345'));\n\nclass SelectAccount extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            accountOptions: [],\n            accounts: [],\n        }\n    }\n\n\n    componentDidMount() {\n        this.getAccounts();\n    }\n\n    handleOk = e => {\n        let that = this;\n        if (tmpPkr !== '') {\n            let accounts = that.state.accounts;\n            for (let ac of accounts) {\n                if (ac.MainPKr === tmpPkr) {\n                    that.props.selectAccount(ac);\n                }\n            }\n        }\n        that.props.hiddenAccount();\n    };\n\n    handleCancel = e => {\n        let that = this;\n        that.props.hiddenAccount();\n    };\n\n    onChange = (v) => {\n        tmpPkr = v;\n    }\n\n    getAccounts() {\n        let that = this;\n\n        let res = pullup.local.accountList()\n\n        if (res) {\n            let dataArray = res;\n            let i = 0;\n            let tmpArr = [];\n            for (let ac of dataArray) {\n                let acName = ac.Name;\n                i++\n                if (!acName){\n                    acName = \"Account\"+i;\n                }\n                tmpArr.push(<Option value={ac.MainPKr} key={i}>{acName+\" \"+ac.PK}</Option>)\n            }\n            that.setState({\n                accountOptions: tmpArr,\n                accounts: dataArray\n            })\n        }\n\n        // ajax.post(\"account/list\", {}, {}, function (res) {\n        //\n        //\n        // })\n    };\n\n    render() {\n        return (\n            <Modal\n                title=\"Select Account\"\n                visible={this.props.visible}\n                onOk={this.handleOk}\n                onCancel={this.handleCancel}\n            >\n                <Select showSearch\n                        style={{width: 450}}\n                        placeholder=\"Select an account\"\n                        onChange={(v) => {\n                            this.onChange(v);\n                        }}\n                >\n                    {this.state.accountOptions}\n                </Select>\n            </Modal>\n        )\n    }\n}\n\n\nexport default SelectAccount","class Lang {\n\n    zh_CN={\n        project:{\n            title:\"合约详情\",\n            totalSupply:\"发行量 (HSGOLD)\",\n            contractAddress:\"合约地址\",\n            balanceSero:\"当前余额 (FPRS)\",\n            balanceAsnow:\"当前余额 (HSGOLD)\",\n            rate:\"兑换比例 (FPRS / HSGOLD)\",\n        },\n\n        account:{\n            title:{\n                utxo:\"钱包账户\",\n                contract:\"合约账户\",\n                swith:\"切换账户\",\n                balanceSero:\"余额 (FPRS)\",\n                balanceAsnow:\"余额 (HSGOLD)\",\n                estimatedTotal:\"预计总收益 (FPRS)\",\n                dayIncome:\"当天返还比例\",\n                staticIncome:\"当天静态返还 (FPRS)\",\n                withdraw:\"可提现金额 (FPRS)\",\n                detail:\"详情\",\n                id:\"编号\",\n                referId:\"推荐人编号\",\n                areaId:\"大区编号\",\n                totalInvest:\"本金\",\n                profitLevel:\"收益倍数\",\n                latestTime:\"最新收益时间\",\n                totalReturn:\"当前返还总数(FPRS)\",\n                totalReturnDay:\"当天返还总数(FPRS)\",\n                recommend:\"下级人数\",\n                ticket:\"当前可用(HSGOLD)\",\n                staticIncomeTips:\"今天的静态收益已经支付到可提现账户.\",\n                staticIncomeTips2:\"触发收益到提现账户.\",\n                investDetail:\"投资详情\",\n                myIncome:\"我的业绩\",\n                areaTotal:\"大区业绩\",\n                areaOtherTotal:\"业绩总和(不含大区)\",\n\n                staticReward:\"静态返还\",\n                recommendReward:\"推荐奖\",\n                nobilityReward:\"星级奖\",\n                vipReward:\"VIP奖\",\n                viewCode:\"查看智能合约\",\n\n            },\n            button:{\n                deposit:\"充值\",\n                buy:\"兑换HSGOLD\",\n                invest:\"投资\",\n                buyTicket:\"充值HSGOLD\",\n                trigger:\"触发收益\",\n                withdraw:\"提现\",\n                close:\"关闭\",\n                copy:\"拷贝\",\n            },\n            modal:{\n                deposit:{\n                    title:\"充值\",\n                    copy:\"拷贝\",\n                },\n\n                buyAsnow:{\n                    title:\"兑换HSGOLD\",\n                    amount:\"数量 (FPRS)\",\n                    amountPlace:\"输入数量\",\n                    rate:\"兑换比例\",\n                    exchange:\"兑换\",\n                    password:\"账户密码\",\n                    passwordPlace:\"输入账户密码\",\n                },\n\n                invest:{\n                    title:\"投资\",\n                    referId:\"推荐人编号\",\n                    amount:\"投资金额\",\n                    amountTips:\"100 FPRS起投\",\n                    ticket:\"门票\",\n                    availableFPRS:\"可用的余额\",\n                    availableAsnow:\"可用的HSGOLD\",\n                    availableExchange:\"最多可抵用\",\n                    total:\"应付合计\",\n                    estimate:\"预计收益\",\n                    password:\"账户密码\",\n                    passwordPlace:\"输入账户密码\",\n                },\n\n                buyTicket:{\n                    title:\"充值HSGOLD\",\n                    amount:\"数量 (HSGOLD)\",\n                    amountPlace:\"输入数量\",\n                    password:\"账户密码\",\n                    passwordPlace:\"输入账户密码\",\n                    availableAsnow:\"可用的HSGOLD\",\n                    availableExchange:\"可兑换\",\n                },\n                trigger:{\n                    password:\"账户密码\",\n                    passwordPlace:\"输入账户密码\",\n                },\n\n                withdraw:{\n                    password:\"账户密码\",\n                    passwordPlace:\"输入账户密码\",\n                    tips:\"* 提现金额将直接提到UTXO账户.\",\n                },\n            },\n        },\n        toast:{\n            lessAmount:\"FPRS余额不足以支付本次交易.\",\n            lessTicket:\"当前可用的HSGOLD不足，请先充值HSGOLD\",\n            lessAsnow:\"钱包账户中可用的HSGOLD不足，请先兑换HSGOLD\",\n            minInvest:\"最小投资金额为100FPRS.\",\n            tx:\"交易提交成功, 等待区块打包交易, 交易哈希: \",\n            copySuccess:\"拷贝成功! \",\n\n        }\n    };\n\n    en_US={\n        project:{\n            title:\"Contract Info\",\n            totalSupply:\"Total Supply (HSGOLD)\",\n            contractAddress:\"Contract Address\",\n            balanceSero:\"Current Balance (FPRS)\",\n            balanceAsnow:\"Current Balance (HSGOLD)\",\n            rate:\"Exchange Rate (FPRS / HSGOLD)\",\n        },\n\n        account:{\n            title:{\n                utxo:\"Wallet Account\",\n                contract:\"Contract Account\",\n                swith:\"Switch Account\",\n                balanceSero:\"Balance (FPRS)\",\n                balanceAsnow:\"Balance (HSGOLD)\",\n                estimatedTotal:\"Estimated Total Income (FPRS)\",\n                dayIncome:\"Return rate on the day\",\n                staticIncome:\"Static Return (FPRS)\",\n                withdraw:\"Withdrawal Account (FPRS)\",\n                detail:\"Detail\",\n                id:\"ID\",\n                referId:\"Refer ID\",\n                areaId:\"Large Area ID\",\n                totalInvest:\"Total Invest\",\n                profitLevel:\"Profit Level\",\n                latestTime:\"Latest Share Time\",\n                totalReturn:\"Total Return\",\n                totalReturnDay:\"Total return on the day (FPRS)\",\n                recommend:\"Recommend Number\",\n                ticket:\"Available (HSGOLD)\",\n                staticIncomeTips:\"Your income have been paid to the withdrawal account.\",\n                staticIncomeTips2:\"Trigger to withdrawal account. \",\n                investDetail:\"Invest Info\",\n                myIncome:\"My performance\",\n                areaTotal:\"Regional performance\",\n                areaOtherTotal:\"Total performance (excluding the large region)\",\n\n                staticReward:\"Static\",\n                recommendReward:\"Recommend\",\n                nobilityReward:\"Nobility\",\n                vipReward:\"VIP\",\n                viewCode:\"View Smart Contract\",\n            },\n            button:{\n                deposit:\"Deposit FPRS\",\n                buy:\"Exchange HSGOLD\",\n                invest:\"Invest\",\n                buyTicket:\"Deposit HSGOLD\",\n                trigger:\"Trigger Income\",\n                withdraw:\"Withdraw\",\n                close:\"Close\",\n                copy:\"Copy\",\n            },\n            modal:{\n                deposit:{\n                    title:\"Deposit\",\n                    copy:\"COPY\",\n                },\n\n                buyAsnow:{\n                    title:\"Exchange HSGOLD\",\n                    amount:\"Amount (FPRS)\",\n                    amountPlace:\"Input Amount\",\n                    rate:\"Exchange Rate\",\n                    exchange:\"Exchange\",\n                    password:\"Password\",\n                    passwordPlace:\"Input Password\",\n                },\n                buyTicket:{\n                    title:\"Deposit HSGOLD\",\n                    amount:\"Amount (HSGOLD)\",\n                    amountPlace:\"Input Number\",\n                    password:\"Password\",\n                    passwordPlace:\"Input Your Password\",\n                    availableAsnow:\"Available HSGOLD\",\n                    availableExchange:\"Exchange\",\n                },\n                invest:{\n                    title:\"Invest\",\n                    referId:\"Refer ID\",\n                    ticket:\"Tickets\",\n                    amount:\"Invet Amount\",\n                    amountTips:\"At least invest 100 FPRS\",\n                    availableFPRS:\"Available Blance\",\n                    availableAsnow:\"Available HSGOLD\",\n                    availableExchange:\"Max Exchange\",\n                    total:\"Total\",\n                    estimate:\"Estimated Return\",\n                    password:\"Password\",\n                },\n\n                trigger:{\n                    password:\"Password\",\n                },\n\n                withdraw:{\n                    password:\"Password\",\n                    tips:\"* This is the withdrawal of the amount to the UTXO account.\",\n                },\n            },\n        },\n        toast:{\n            lessAmount:\"The balance is not enough to pay for this transaction.\",\n            lessTicket:\"There are not enough tickets, please depost the asnow first.\",\n            minInvest:\"Invest Amount at least 100 FPRS.\",\n            lessAsnow:\"Insufficient HSGOLD available in the wallet account, please exchange HSGOLD first\",\n            tx:\"The transaction was submitted successfully, waiting for the block to be packaged, and the transaction hash: \",\n            copySuccess:\"Copy to clipboard successfully! \",\n        },\n    }\n}\n\nexport default Lang","import React, {Component} from 'react';\nimport {\n    Layout,\n    Skeleton,\n    Descriptions,\n    Divider,\n    notification,\n    List,\n    Tag,\n    Avatar,\n    Row,\n    Col,\n    Statistic,\n    Button,\n    Modal,\n    ConfigProvider,\n    Radio,\n    Input,\n    Rate,\n    message, Form, InputNumber\n} from \"antd\";\n\nimport SelectAccount from \"./component/SelectAccount\"\nimport Axios from \"./server\";\nimport BigNumber from \"bignumber.js\"\nimport serojs from \"serojs\"\nimport Pullup from \"pullup-js-sdk\"\n\nimport \"./App.css\"\nimport copy from \"copy-text-to-clipboard\";\nimport QRCode from \"qrcode\";\nimport logo from \"./logo.png\"\nimport enUS from 'antd/es/locale/en_US';\nimport zhCN from 'antd/es/locale/zh_CN';\nimport Language from \"./Lang\"\nimport identicon from \"identicon.js\"\nimport Contract from \"./component/contract\"\n\nlet ct = new Contract();\nlet Lang = new Language();\nconst {Header, Content, Footer} = Layout;\n\nlet ajax = new Axios();\nlet contractAddress = ct.address;\nlet ABI = ct.abi;\n\nlet contract = serojs.callContract(ABI, contractAddress);\n\nlet decimal = new BigNumber(10).pow(18);\nconst {Countdown} = Statistic;\n\nvar pullup = new Pullup();\npullup.setProvider(new pullup.providers.HttpProvider('http://127.0.0.1:2345'));\n\nconst openNotificationWithIcon = (type, message, desc) => {\n    notification[type]({\n        message: message,\n        description: <p style={{wordBreak: 'normal', whiteSpace: 'pre-wrap', wordWrap: 'break-word'}}>{desc}</p>,\n        duration: null,\n    });\n};\n\nconst BuyAsnowForm = Form.create({name: 'form_in_modal1'})(\n    // eslint-disable-next-line\n    class extends React.Component {\n\n        state = {\n            asnow: 0,\n            confirmLoading: false,\n        }\n\n        inputSero = (v, rate) => {\n            let value = new BigNumber(v).dividedBy(rate).toFixed(2);\n            this.setState({\n                asnow: value\n            })\n        }\n\n        render() {\n            const {visible, rate, onCancel, onCreate, form} = this.props;\n            const {getFieldDecorator} = form;\n            let that = this;\n            return (\n                <Modal\n                    visible={visible}\n                    title={Lang[that.props.lang].account.modal.buyAsnow.title}\n                    onCancel={onCancel}\n                    onOk={() => {\n                        this.setState({\n                            confirmLoading: true\n                        });\n                        setTimeout(function () {\n                            onCreate(function (res) {\n                                that.setState({\n                                    confirmLoading: res\n                                });\n                            });\n                        },10)\n                    }}\n                    confirmLoading={this.state.confirmLoading}\n                >\n                    <Form layout=\"vertical\">\n                        <Form.Item label={Lang[that.props.lang].account.modal.buyAsnow.amount}>\n                            {getFieldDecorator('Amount', {\n                                rules: [{required: true, message: `Please Input Amount`}],\n                            })(<InputNumber min={0} step={100} style={{width: '100%'}} allowClear\n                                            onChange={(v) => this.inputSero(v, rate)}\n                                            placeholder={Lang[that.props.lang].account.modal.buyAsnow.amountPlace}\n                                            autoComplete=\"off\"/>)}\n                        </Form.Item>\n                        <p>Rate: {<span style={{color: '#1DA57A'}}>1 HSGOLD = {rate} FPRS</span>} , Exchange: {<strong\n                            style={{color: 'rgb(216, 0, 38)'}}>{new BigNumber(this.state.asnow).toFixed(6)}</strong>} HSGOLD</p>\n                    </Form>\n                </Modal>\n            );\n        }\n    },\n);\n\nconst InvestForm = Form.create({name: 'form_in_modal2'})(\n    class extends React.Component {\n\n        state = {\n            confirmLoading: false,\n            estimateReturn: 0,\n            estimateLevel: 0,\n            ticket: 0.000000,\n            amount: 0.000000,\n            total: 0.000000,\n            ticketSero: 0.000000,\n            ticketAsnow: 0.000000,\n        }\n\n        staticTotal() {\n            let that = this;\n            setTimeout(function () {\n                let rate = that.props.rate;\n                let times = that.props.times;\n                let ticket = new BigNumber(that.state.ticketSero);\n                let total = new BigNumber(that.state.amount);\n                let ticketAsnow = new BigNumber(that.state.amount).dividedBy(10).dividedBy(rate);\n\n                let estimateLevel = 3;\n                if (times > 0) {\n                    estimateLevel = times;\n                } else {\n                    if (parseFloat(that.state.amount) > 0 && parseFloat(that.state.amount) < 1000) {\n                        estimateLevel = 3\n                    } else if (parseFloat(that.state.amount) >= 1000 && parseFloat(that.state.amount) < 5000) {\n                        estimateLevel = 4\n                    } else if (parseFloat(that.state.amount) >= 5000) {\n                        estimateLevel = 5\n                    }\n                }\n\n                that.setState({\n                    ticket: ticket.toFixed(6),\n                    total: total.toFixed(6),\n                    ticketAsnow: ticketAsnow.toFixed(6),\n                    estimateLevel: estimateLevel\n                })\n            }, 10)\n        }\n\n        render() {\n            const {visible, asnow, rate, sero, onCancel, onCreate, form, referId} = this.props;\n            const {getFieldDecorator, setFieldsValue} = form;\n\n            setTimeout(function () {\n                if (referId && referId !== 0) {\n                    setFieldsValue({\"ReferId\": referId});\n                }\n            }, 100)\n\n            let that = this;\n            return (\n                <Modal\n                    visible={visible}\n                    title={Lang[that.props.lang].account.modal.invest.title}\n                    onCancel={onCancel}\n                    onOk={() => {\n                        this.setState({\n                            confirmLoading: true\n                        });\n                        setTimeout(function () {\n                            onCreate(function (res) {\n                                that.setState({\n                                    confirmLoading: res\n                                });\n                            });\n                        },10)\n                    }}\n                    confirmLoading={this.state.confirmLoading}\n                >\n                    <Form layout=\"vertical\">\n                        <Form.Item label={Lang[that.props.lang].account.modal.invest.referId}>\n                            {getFieldDecorator(`ReferId`, {\n                                rules: [{required: true, message: `Please Input Refer Id`}],\n                            })(<Input style={{width: '30%'}} disabled={!(!referId || referId === 0)}\n                                      placeholder={referId ? referId : \"\"} autoComplete=\"off\"/>)}\n                        </Form.Item>\n                        <Form.Item\n                            label={`${Lang[that.props.lang].account.modal.invest.amount} (Available Balance: ${sero} FPRS)`}>\n                            {getFieldDecorator('AmountSero', {\n                                rules: [{required: true, message: `Please Input Amount! `}],\n                            })(<InputNumber min={0} precision={6} max={parseFloat(sero)} step={100}\n                                            style={{width: '30%'}} onChange={(v) => {\n                                let ticketSero = new BigNumber(v).dividedBy(10).toFixed(6);\n                                setFieldsValue({'TicketSero': ticketSero});\n                                that.setState({amount: v, ticketSero: ticketSero});\n                                that.staticTotal();\n                            }} allowClear placeholder=\"0.000000\" autoComplete=\"off\"/>)} FPRS\n                            ({Lang[that.props.lang].account.modal.invest.amountTips})\n                        </Form.Item>\n                        <Form.Item label={`${Lang[that.props.lang].account.modal.invest.ticket} (Amount x 10%)`}>\n                            {getFieldDecorator('TicketSero', {\n                                rules: [{required: true, message: 'Please input FPRS value!'}],\n                            })(<InputNumber precision={6} disabled={true} min={0} max={parseFloat(sero)} step={100}\n                                            style={{width: '30%'}} onChange={(v) => {\n                                that.setState({ticketSero: v});\n                                that.staticTotal();\n                            }} allowClear placeholder=\"0.000000\" autoComplete=\"off\"/>)} FPRS (1 HSGOLD\n                            = {rate} FPRS)<br/>\n                            {Lang[that.props.lang].account.modal.invest.availableAsnow}: {<span\n                            style={{color: '#1DA57A'}}>{asnow ? asnow : \"0\"}</span>}\n                        </Form.Item>\n                        <p>{Lang[that.props.lang].account.modal.invest.estimate}: <span\n                            style={{color: '#1DA57A'}}>{that.state.amount}</span> (FPRS) x <span\n                            style={{color: '#1DA57A'}}>{that.state.estimateLevel} </span>(Times) = <strong\n                            style={{color: 'rgb(216, 0, 38)'}}>{new BigNumber(that.state.amount).multipliedBy(that.state.estimateLevel).toFixed(6)} </strong>FPRS\n                        </p>\n\n                        <p>{Lang[that.props.lang].account.modal.invest.total} : <strong\n                            style={{color: 'rgb(216, 0, 38)'}}>{this.state.total}</strong> FPRS, <strong\n                            style={{color: 'rgb(216, 0, 38)'}}>{this.state.ticketAsnow}</strong> HSGOLD</p>\n                    </Form>\n                </Modal>\n            );\n        }\n    },\n);\n\nconst BuyTicketForm = Form.create({name: 'form_in_modal5'})(\n    // eslint-disable-next-line\n    class extends React.Component {\n\n        state = {\n            asnow: 0,\n            confirmLoading: false,\n        }\n\n        render() {\n            const {visible, asnow, onCancel, onCreate, form} = this.props;\n            const {getFieldDecorator} = form;\n            let that = this;\n            return (\n                <Modal\n                    visible={visible}\n                    title={Lang[that.props.lang].account.modal.buyTicket.title}\n                    onCancel={onCancel}\n                    onOk={() => {\n                        this.setState({\n                            confirmLoading: true\n                        });\n                        setTimeout(function () {\n                            onCreate(function (res) {\n                                that.setState({\n                                    confirmLoading: res\n                                });\n                            });\n                        },10)\n                    }}\n                    confirmLoading={this.state.confirmLoading}\n                >\n                    <Form layout=\"vertical\">\n                        <Form.Item\n                            label={`${Lang[that.props.lang].account.modal.buyTicket.amount}(${Lang[that.props.lang].account.modal.buyTicket.availableAsnow}:${asnow})`}>\n                            {getFieldDecorator('Amount', {\n                                rules: [{required: true, message: `Please Input Amount`}],\n                            })(<InputNumber min={0} max={parseFloat(asnow)} step={100} precision={5}\n                                            style={{width: '100%'}} allowClear\n                                            placeholder={Lang[that.props.lang].account.modal.buyTicket.amountPlace}\n                                            autoComplete=\"off\"/>)}\n                        </Form.Item>\n                    </Form>\n                </Modal>\n            );\n        }\n    },\n);\n\nclass ContentPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            showAccountSelect: false,\n            showDeposit: false,\n            showBuyAsnow: false,\n            showBuyTicket: false,\n            showInvest: false,\n            showShareProfit: false,\n            showWithdraw: false,\n\n            modal1Visible: false,\n\n            currentAccount: {},\n            balanceSero: 0,\n            balanceAsnow: 0,\n            ct_balance_sero: 0,\n            ct_balanceOfSero: 0,\n\n            ct_balance_asnow: 0,\n            ct_rate: 0,\n            ct_id: 0,\n            ct_details: {},\n\n            lang: \"zh_CN\",\n        }\n    }\n\n    componentWillMount() {\n        let lang = localStorage.getItem(\"lang\");\n        if (!lang) {\n            lang = \"zh_CN\";\n            localStorage.setItem(\"lang\", \"zh_CN\");\n        }\n        this.setState({\n            lang: lang,\n        })\n    }\n\n    componentDidMount() {\n        let that = this;\n        setTimeout(function () {\n            that.showSelectAccount();\n        }, 300);\n        if (!this.state.showAccountSelect) {\n            setTimeout(function () {\n                that.getDetail();\n                // that.getAsnowBalances();\n                that.getRate();\n                that.getContractBalance();\n                that.getContractSeroBalance();\n\n            }, 310)\n        }\n\n        setInterval(function () {\n            that.getDetail();\n            // that.getAsnowBalances();\n            that.getRate();\n            that.getContractBalance();\n            that.getContractSeroBalance();\n            if (that.state.currentAccount.PK) {\n                that.getAccount(that.state.currentAccount.PK)\n            }\n        }, 30000)\n    }\n\n    showSelectAccount() {\n\n        if (!this.state.currentAccount.PK) {\n            let pk = localStorage.getItem(\"accountPk\");\n            if (pk) {\n                this.getAccount(pk)\n                this.setState({\n                    loading: false\n                })\n            } else {\n                this.setState({\n                    showAccountSelect: true\n                })\n            }\n        }\n    }\n\n    showDeposit() {\n\n        this.setState({\n            showDeposit: true\n        })\n\n        let canvas = document.getElementById('qrImg')\n        QRCode.toCanvas(canvas, this.state.currentAccount.MainPKr, function (error) {\n            if (error) console.error(error)\n            console.log('success!');\n        })\n    }\n\n    selectAccount = ac => {\n        this.setState({\n            currentAccount: ac,\n            showAccountSelect: false,\n            loading: false\n        });\n        localStorage.setItem(\"accountPk\", ac.PK);\n        window.location.reload();\n\n    }\n\n    hiddenAccount = () => {\n        this.setState({\n            showAccountSelect: false,\n        });\n    }\n\n    onChange = checked => {\n        this.setState({loading: !checked});\n    };\n\n    getContractBalance() {\n        let that = this;\n        ajax.postSeroRpc(\"sero_getBalance\", [contractAddress, \"latest\"], function (res) {\n            let sero = new BigNumber(res.result.tkn.FPRS ? res.result.tkn.FPRS : \"0\", 16).dividedBy(decimal).toFixed(6);\n            let asnow = new BigNumber(res.result.tkn.HSGOLD ? res.result.tkn.HSGOLD : \"0\", 16).dividedBy(decimal).toFixed(6);\n            that.setState({\n                ct_balance_sero: sero,\n                ct_balance_asnow: asnow,\n            })\n        })\n    }\n\n    getContractSeroBalance() {\n        let that = this;\n        that.callMethod(\"balanceOfSero\", [], function (res) {\n            if (res) {\n                that.setState({\n                    ct_balanceOfSero: new BigNumber(res, 10).dividedBy(decimal).toFixed(6),\n                })\n            }\n        })\n    }\n\n    //pullup\n    getAccount(pk) {\n        let that = this;\n        let currentAccount = pullup.local.accountDetail(pk);\n        let strMap = new Map();\n        let balanceSero = 0;\n        let balanceAsnow = 0;\n        let balanceObj = currentAccount.Balance;\n        for (var currency of Object.keys(balanceObj)) {\n            strMap.set(currency, balanceObj[currency]);\n            if (currency === 'FPRS') {\n                balanceSero = new BigNumber(balanceObj[currency]).dividedBy(decimal).toFixed(6);\n            } else if (currency === 'HSGOLD') {\n                balanceAsnow = new BigNumber(balanceObj[currency]).dividedBy(decimal).toFixed(6);\n            }\n        }\n        let data = new identicon(pk, 200).toString();\n        currentAccount[\"avatar\"] = \"data:image/png;base64,\" + data;\n        that.setState({\n            currentAccount: currentAccount,\n            balanceSero: balanceSero,\n            balanceAsnow: balanceAsnow\n        });\n    }\n\n\n    //=== contract\n\n    getDetail() {\n        let that = this;\n        let res = that.callMethod(\"details\", []);\n        console.log(\"res:\",res);\n        let detail = {\n            referId: \"\",\n            largeAreaId: \"\",\n            largeAreaTotal: new BigNumber(\"0\").dividedBy(decimal).toFixed(6),\n            amount: new BigNumber(\"0\").dividedBy(decimal).toFixed(6),\n            returnAmount: new BigNumber(\"0\").dividedBy(decimal).toFixed(6),\n            achievement: new BigNumber(\"0\").dividedBy(decimal).toFixed(6),\n            recommendNum: parseInt(new BigNumber(\"0\").toString(10)),\n            profitLevel: parseInt(new BigNumber(\"0\").toString(10)),\n            value: new BigNumber(\"0\").dividedBy(decimal).toFixed(6),\n            star: parseInt(new BigNumber(\"0\").toString(10)),\n            isKing: false,\n        }\n        if (res!==\"0x0\"){\n            let data = res;\n            if(data){\n                detail = {\n                    referId: data[0] == 'JFVVW2ITNSJHF' ? \"\" : data[0],\n                    largeAreaId: data[1] == 'JFVVW2ITNSJHF' ? \"\" : data[1],\n                    largeAreaTotal: new BigNumber(data[2]).dividedBy(decimal).toFixed(6),\n                    amount: new BigNumber(data[3]).dividedBy(decimal).toFixed(6),\n                    returnAmount: new BigNumber(data[4]).dividedBy(decimal).toFixed(6),\n                    achievement: new BigNumber(data[5]).dividedBy(decimal).toFixed(6),\n                    recommendNum: parseInt(new BigNumber(data[6]).toString(10)),\n                    profitLevel: parseInt(new BigNumber(data[7]).toString(10)),\n                    value: new BigNumber(data[8]).dividedBy(decimal).toFixed(6),\n                    star: parseInt(new BigNumber(data[9]).toString(10)),\n                    isKing: data[10],\n                }\n            }\n        }\n        let balanceOfAsnow = that.callMethod(\"balanceOfAsnow\", []);\n        detail[\"asnowBalances\"] = new BigNumber(balanceOfAsnow).dividedBy(decimal).toFixed(6);\n\n        let id = that.callMethod(\"id\", []);\n        console.log(\"id:\",id);\n        detail[\"id\"] = (id == \"JFVVW2ITNSJHF\" ? \"\" : id);\n\n        let detailsOfIncome = that.callMethod(\"detailsOfIncome\", []);\n        detail[\"detailsOfIncome\"] = detailsOfIncome;\n\n        console.log(\"detailsOfIncome:\",detailsOfIncome)\n\n        let calcuStaticProfit = that.callMethod(\"calcuStaticProfit\", []);\n        detail[\"dayProfit\"] = new BigNumber(calcuStaticProfit).dividedBy(decimal).toFixed(6);\n\n        that.setState({\n            ct_details: detail\n        })\n    }\n\n    getRate() {\n        let that = this;\n        let res = that.callMethod(\"conversionRate\", []);\n        if (res && res.length > 0) {\n            let asnow = new BigNumber(res[0]);\n            let sero = new BigNumber(res[1])\n            let point = asnow.dividedBy(sero).toFixed(2);\n            that.setState({\n                ct_rate: point\n            })\n        }\n    }\n\n    callMethod(_method, args, callback) {\n        let that = this;\n        // let param = [ABI, contractAddress, _method, args]\n\n        let packData = contract.packData(_method, args);\n        let callParams = {\n            from: that.state.currentAccount.MainPKr,\n            to: contractAddress,\n            data: packData\n        }\n        let callData = pullup.sero.call(callParams, \"latest\");\n        if(callData !== \"0x\"){\n            let res = contract.unPackData(_method, callData);\n            if (callback){\n                callback(res);\n            }else{\n                return res\n            }\n        }else{\n            return \"0x0\"\n        }\n        //\n        // try{\n        //\n        // }catch (e) {\n        //     console.log(\"_method:\",_method,args,e.message);\n        // }\n    }\n\n    executeMethod(_method, args, value, cy, password, callback) {\n        let that = this;\n\n        let packData = contract.packData(_method, args);\n        let executeData = {\n            from: that.state.currentAccount.PK,\n            to: contractAddress,\n            value: \"0x\"+value,//FPRS\n            data: packData,\n            gas_price: \"0x\"+new BigNumber(\"1000000000\").toString(16),\n            cy:cy,\n        };\n        let estimateParam = {\n            from: that.state.currentAccount.MainPKr,\n            to: contractAddress,\n            value: \"0x\"+value,//FPRS\n            data: packData,\n            gas_price: \"0x\"+new BigNumber(\"1000000000\").toString(16),\n            cy:cy,\n        }\n        executeData[\"gas\"] = pullup.sero.estimateGas(estimateParam);\n\n        let res = pullup.local.executeContract(executeData)\n        if (callback) {\n            callback(res)\n        }\n    }\n\n\n    handleCancel = () => {\n        this.setState({\n            showDeposit: false\n        })\n    }\n\n    //====  buyAsnow begin\n    handleBuyAsnowCancel = () => {\n        this.setState({showBuyAsnow: false});\n    };\n\n    handleBuyAsnowCreate = (cb) => {\n        let that = this;\n        const {form} = this.formRef.props;\n        form.validateFields((err, values) => {\n            if (err) {\n                if (cb) {\n                    cb(false)\n                }\n                return;\n            }\n            let amount = form.getFieldValue(\"Amount\");\n            try {\n                this.executeMethod(\"buyAsnow\", [], new BigNumber(amount).multipliedBy(decimal).toString(16), \"FPRS\", '', function (res) {\n                    if (res) {\n                        form.resetFields();\n                        that.setState({showBuyAsnow: false});\n                        setTimeout(function () {\n                            openNotificationWithIcon('success', 'Successful', `${Lang[that.state.lang].toast.tx}${res}`)\n                        }, 3000)\n                    }\n                    if (cb) {\n                        cb(false)\n                    }\n                });\n            } catch (err) {\n                if (err) {\n                    message.error(err.message);\n                } else {\n                    message.error(\"request FPRS Node error:[\" + err.message+ \"]\");\n                }\n                if (cb) {\n                    cb(false)\n                }\n            }\n\n        });\n    };\n\n    saveBuyAsnowFormRef = formRef => {\n        this.formRef = formRef;\n    };\n    //====  buyAsnow end\n\n    //====  Invest begin\n    handleInvestCancel = () => {\n        this.setState({showInvest: false});\n    };\n\n    handleInvestCreate = (cb) => {\n        let that = this;\n        const {form} = this.formRef2.props;\n        form.validateFields((err, values) => {\n            if (err) {\n                if (cb) {\n                    cb(false)\n                }\n                return;\n            }\n            let amountSero = form.getFieldValue(\"AmountSero\");\n            // let ticketSero=form.getFieldValue(\"TicketSero\");\n            let referId = form.getFieldValue(\"ReferId\");\n            let password = form.getFieldValue(\"Password\");\n\n            let ticketAsnow = new BigNumber(amountSero).dividedBy(10).dividedBy(that.state.ct_rate).toFixed(6);\n\n            if (that.state.ct_details.referId) {\n                referId = that.state.ct_details.referId;\n            }\n            if (new BigNumber(amountSero).comparedTo(new BigNumber(this.state.balanceSero)) > 0) {\n                if (cb) {\n                    cb(false)\n                }\n                message.warn(Lang[that.state.lang].toast.lessAmount);\n            } else if (new BigNumber(ticketAsnow).comparedTo(new BigNumber(this.state.ct_details.asnowBalances)) > 0) {\n                if (cb) {\n                    cb(false)\n                }\n                message.warn(Lang[that.state.lang].toast.lessTicket);\n            } else if (parseFloat(amountSero) < 100) {\n                if (cb) {\n                    cb(false)\n                }\n                message.warn(Lang[that.state.lang].toast.minInvest);\n            } else {\n                try {\n                    this.executeMethod(\"invest\", [referId], new BigNumber(amountSero).multipliedBy(decimal).toString(16), \"FPRS\", password, function (res) {\n                        if (res) {\n                            form.resetFields();\n                            that.setState({showInvest: false});\n                            setTimeout(function () {\n                                openNotificationWithIcon('success', 'Successful', `${Lang[that.state.lang].toast.tx}${res}`)\n                            }, 3000)\n                        }\n                        if (cb) {\n                            cb(false)\n                        }\n                    });\n                } catch (err) {\n                    if (err) {\n                        message.error(err.message);\n                    } else {\n                        message.error(\"request FPRS Node error:[\" + err.message+ \"]\");\n                    }\n                    if (cb) {\n                        cb(false)\n                    }\n                }\n            }\n        });\n    };\n\n    calcuPrincipalProfit = (sero, cb) => {\n        if (sero) {\n            let seroHex = \"0x\" + new BigNumber(sero).multipliedBy(decimal).toString(16);\n            this.callMethod(\"calcuPrincipalProfit\", [seroHex], function (res) {\n                if (cb) {\n                    cb(res);\n                }\n            })\n        }\n    }\n\n    saveInvestFormRef = formRef => {\n        this.formRef2 = formRef;\n    };\n\n    //====  Invest end\n\n    shareProfit() {\n        let that = this;\n        try {\n            this.executeMethod(\"triggerStaticProfit\", [], \"0\", \"FPRS\", '', function (res) {\n                if (res) {\n                    openNotificationWithIcon('success', 'Successful', `${Lang[that.state.lang].toast.tx}${res}`)\n                } else {\n                    if (res.error) {\n                        message.error(res.error.message);\n                    } else {\n                        message.error(\"request FPRS Node error:[\" + res + \"]\");\n                    }\n                }\n            });\n        } catch (err) {\n            if (err) {\n                message.error(err.message);\n            } else {\n                message.error(\"request FPRS Node error:[\" + err.message+ \"]\");\n            }\n        }\n\n    }\n\n    withdraw() {\n        let that = this;\n        try {\n            this.executeMethod(\"withdrawBalance\", [], \"0\", \"FPRS\", '', function (res) {\n                if (res) {\n                    openNotificationWithIcon('success', 'Successful', `${Lang[that.state.lang].toast.tx}${res}`)\n                } else {\n                    if (res.error) {\n                        message.error(res.error.message);\n                    } else {\n                        message.error(\"request FPRS Node error:[\" + res + \"]\");\n                    }\n                }\n            });\n        } catch (err) {\n            if (err) {\n                message.error(err.message);\n            } else {\n                message.error(\"request FPRS Node error:[\" + err.message+ \"]\");\n            }\n        }\n    }\n\n\n    //==== Buy Ticket begin\n\n    handleBuyTicketCancel = () => {\n        this.setState({showBuyTicket: false});\n    };\n\n    handleBuyTicketCreate = (cb) => {\n        let that = this;\n        const {form} = this.formRef5.props;\n        form.validateFields((err, values) => {\n            if (err) {\n                if (cb) {\n                    cb(false)\n                }\n                return;\n            }\n\n            let amount = form.getFieldValue(\"Amount\");\n            if (new BigNumber(amount).comparedTo(new BigNumber(that.state.balanceAsnow)) > 0) {\n                if (cb) {\n                    cb(false)\n                }\n                message.warn(Lang[that.state.lang].toast.lessAsnow);\n            } else {\n                try {\n                    this.executeMethod(\"paymentAsnow\", [], new BigNumber(amount).multipliedBy(decimal).toString(16), \"HSGOLD\", '', function (res) {\n                        if (res) {\n                            form.resetFields();\n                            that.setState({showBuyTicket: false});\n                            setTimeout(function () {\n                                openNotificationWithIcon('success', 'Successful', `${Lang[that.state.lang].toast.tx}${res}`)\n                            }, 3000)\n                        }\n                        if (cb) {\n                            cb(false)\n                        }\n                    });\n                } catch (err) {\n                    if (err) {\n                        message.error(err.message);\n                    } else {\n                        message.error(\"request FPRS Node error:[\" + err.message+ \"]\");\n                    }\n                    if (cb) {\n                        cb(false)\n                    }\n                }\n            }\n        });\n    };\n\n    saveBuyTicketFormRef = formRef => {\n        this.formRef5 = formRef;\n    };\n\n\n    //==== Buy Ticket end\n\n    render() {\n        const {loading, showAccountSelect, currentAccount} = this.state;\n        let accountName = currentAccount.PK;\n        let that = this;\n        let staticReward = that.state.ct_details.detailsOfIncome ? new BigNumber(that.state.ct_details.detailsOfIncome[0]).dividedBy(decimal).toFixed(2) : 0;\n        let recommendReward = that.state.ct_details.detailsOfIncome ? new BigNumber(that.state.ct_details.detailsOfIncome[1]).dividedBy(decimal).toFixed(2) : 0;\n        let nobilityReward = that.state.ct_details.detailsOfIncome ? new BigNumber(that.state.ct_details.detailsOfIncome[2]).dividedBy(decimal).toFixed(2) : 0;\n        let vipReward = that.state.ct_details.detailsOfIncome ? new BigNumber(that.state.ct_details.detailsOfIncome[3]).dividedBy(decimal).toFixed(2) : 0;\n        // let currentIncome = that.state.ct_details.detailsOfIncome?new BigNumber(that.state.ct_details.detailsOfIncome[4]).dividedBy(decimal).toFixed(2):0;\n        let staticTimestamp = that.state.ct_details.detailsOfIncome ? that.state.ct_details.detailsOfIncome[5] : 0;\n\n        const salesPieData = [\n            {\n                x: Lang[this.state.lang].account.title.staticReward,\n                y: parseFloat(staticReward),\n            },\n            {\n                x: Lang[this.state.lang].account.title.recommendReward,\n                y: parseFloat(recommendReward),\n            },\n            {\n                x: Lang[this.state.lang].account.title.nobilityReward,\n                y: parseFloat(nobilityReward),\n            },\n            {\n                x: Lang[this.state.lang].account.title.vipReward,\n                y: parseFloat(vipReward),\n            },\n\n        ];\n\n        const showChart = parseFloat(staticReward) > 0 || parseFloat(recommendReward) > 0 || parseFloat(nobilityReward) > 0 || parseFloat(vipReward) > 0\n\n        const countDown = nextShareTime();\n        let totalReturnDay = this.state.ct_balanceOfSero ? new BigNumber(this.state.ct_balanceOfSero).dividedBy(30).toFixed(6) : \"0\";\n        let returnPercent = 0;\n        if (this.state.ct_details.returnAmount && parseFloat(this.state.ct_details.returnAmount) > 0) {\n            let a = parseFloat(this.state.ct_details.returnAmount);\n            let b = new BigNumber(this.state.ct_details.amount).multipliedBy(this.state.ct_details.profitLevel).toString(10);\n            returnPercent = (a * 100 / parseFloat(b)).toFixed(2);\n        }\n\n        let showCountDown = new Date(staticTimestamp * 1000).getUTCDate() === parseInt(new Date().getUTCDate());\n        return (\n            <div className=\"App\" style={{marginTop: '80px'}}>\n\n                <Content style={{padding: '0 50px'}}>\n                    <div style={{background: '#fff', width:'100%', padding: 24, minHeight: document.body.clientHeight}}>\n\n                        <div style={{float:'left',width:\"40%\"}}>\n                            <Skeleton loading={loading}>\n                                <Descriptions title={<h1>{Lang[this.state.lang].account.title.contract}</h1>}/>\n\n\n                                <Row style={{textAlign: 'center'}}>\n\n\n                                    <Col span={12}>\n                                        <Statistic title={Lang[this.state.lang].account.title.estimatedTotal}\n                                                   value={new BigNumber(this.state.ct_details.amount ? this.state.ct_details.amount : 0).multipliedBy(this.state.ct_details.profitLevel ? this.state.ct_details.profitLevel : 0).toFixed(6)}\n                                                   precision={6}/>\n                                        <Button style={{marginTop: 16}} type=\"primary\" onClick={() => {\n                                            this.setState({showInvest: true})\n                                        }}>{Lang[this.state.lang].account.button.invest}</Button>\n                                    </Col>\n                                    <Col span={12}>\n                                        <Statistic title={Lang[this.state.lang].account.title.totalReturnDay}\n                                                   value={totalReturnDay} precision={6}/>\n                                    </Col>\n                                </Row>\n                                <Row style={{textAlign: 'center'}}>\n\n                                    <Col span={12}>\n                                        <Statistic title={Lang[this.state.lang].account.title.ticket}\n                                                   value={new BigNumber(this.state.ct_details.asnowBalances ? this.state.ct_details.asnowBalances : 0).toFixed(6)}\n                                                   precision={6}/>\n                                        <Button style={{marginTop: 16}} type=\"primary\" onClick={() => {\n                                            this.setState({showBuyTicket: true})\n                                        }}>{Lang[this.state.lang].account.button.buyTicket}</Button>\n                                    </Col>\n                                    <Col span={12}>\n                                        <Statistic title={Lang[this.state.lang].account.title.dayIncome}\n                                                   value={this.state.ct_details.dayProfit&&parseFloat(totalReturnDay)>0 ? new BigNumber(this.state.ct_details.dayProfit).multipliedBy(100).dividedBy(totalReturnDay).toFixed(2) : \"0\"}\n                                                   suffix={\"%\"}/>\n                                    </Col>\n\n                                </Row>\n                                <Row style={{textAlign: 'center'}}>\n\n\n                                    <Col span={12}>\n                                        <Statistic title={Lang[this.state.lang].account.title.staticIncome}\n                                                   value={this.state.ct_details.dayProfit} precision={6}/>\n                                        {\n                                            showCountDown ?\n                                                <Countdown style={{marginTop: 14}} title=\"\" format=\"HH:mm:ss\"\n                                                           value={parseFloat(countDown)} onFinish={() => {\n                                                    this.getDetail()\n                                                }}/> : <Button style={{marginTop: 16}} type=\"primary\"\n                                                               disabled={showCountDown} onClick={() => {\n                                                    this.shareProfit()\n                                                }}>{Lang[this.state.lang].account.button.trigger}</Button>\n                                        }\n                                    </Col>\n                                    <Col span={12}>\n                                        <Statistic title={Lang[this.state.lang].account.title.areaTotal}\n                                                   value={this.state.ct_details.largeAreaTotal} precision={6}/>\n                                    </Col>\n\n                                </Row>\n                                <Row style={{textAlign: 'center'}}>\n                                    <Col span={12}>\n                                        <Statistic title={Lang[this.state.lang].account.title.withdraw}\n                                                   value={new BigNumber(this.state.ct_details.value ? this.state.ct_details.value : 0).toFixed(6)}\n                                                   precision={6}/>\n                                        <Button style={{marginTop: 16}} disabled={new BigNumber(this.state.ct_details.value ? this.state.ct_details.value : 0).comparedTo(0) < 1} type=\"primary\" onClick={() => {\n                                            this.withdraw()\n                                        }}>{Lang[this.state.lang].account.button.withdraw}</Button>\n                                    </Col>\n                                    <Col span={12}>\n                                        <Statistic title={Lang[this.state.lang].account.title.areaOtherTotal}\n                                                   value={new BigNumber(this.state.ct_details.achievement).minus(new BigNumber(this.state.ct_details.largeAreaTotal)).toFixed(6)}\n                                                   precision={6}/>\n                                    </Col>\n\n                                </Row>\n                            </Skeleton>\n\n                        </div>\n                        <div style={{float:'left',width:\"60%\"}}>\n                            <List itemLayout=\"vertical\" size=\"large\" rowKey=\"1\">\n                                <List.Item>\n                                    <Skeleton loading={loading} avatar>\n                                        <Descriptions title={\n                                            <h1>{Lang[this.state.lang].account.title.utxo} <Button size=\"small\"\n                                                                                                   onClick={() => {\n                                                                                                       this.setState({\n                                                                                                           showAccountSelect: true\n                                                                                                       })\n                                                                                                   }}>{Lang[this.state.lang].account.title.swith}</Button>\n                                            </h1>}/>\n                                        <Row>\n                                            <Col span={12}>\n                                                <List.Item.Meta\n                                                    avatar={<p><Avatar shape=\"square\" size={64}\n                                                                       src={currentAccount.avatar}/></p>}\n                                                    title={\n                                                        <small>{accountName ? accountName.substring(0, 30) + \"...\" : \"\"}{this.state.ct_details.isKing ?\n                                                            <Tag color=\"gold\">VIP</Tag> : \"\"}</small>}\n                                                    description={<Rate count={4}\n                                                                       value={this.state.ct_details.star ? this.state.ct_details.star : 0}\n                                                                       disabled/>}\n                                                />\n                                            </Col>\n                                            <Col span={6}>\n                                                <Statistic title={Lang[this.state.lang].account.title.balanceSero}\n                                                           value={this.state.balanceSero} precision={6}/>\n                                                <Button style={{marginTop: 16}} type=\"primary\" onClick={() => {\n                                                    this.showDeposit()\n                                                }}>{Lang[this.state.lang].account.button.deposit}</Button>\n                                            </Col>\n                                            <Col span={6}>\n                                                <Statistic title={Lang[this.state.lang].account.title.balanceAsnow}\n                                                           value={this.state.balanceAsnow} precision={6}/>\n                                                <Button style={{marginTop: 16}} type=\"primary\" onClick={() => {\n                                                    this.setState({showBuyAsnow: true})\n                                                }}>{Lang[this.state.lang].account.button.buy}</Button>\n                                            </Col>\n                                        </Row>\n\n                                    </Skeleton>\n                                </List.Item>\n\n\n                                <List.Item>\n                                    <Skeleton loading={loading}>\n                                        <Descriptions title={<h1>{Lang[this.state.lang].project.title}</h1>}>\n                                            <Descriptions.Item label={Lang[this.state.lang].project.contractAddress}>\n                                                <small>{contractAddress}</small>\n                                            </Descriptions.Item>\n                                        </Descriptions>\n\n                                        <Row>\n                                            <Col span={8}>\n                                                <Statistic title={Lang[this.state.lang].project.rate}\n                                                           value={this.state.ct_rate} precision={2}\n                                                           valueStyle={{color: '#3f8600'}}/>\n                                            </Col>\n                                        </Row>\n                                        <Divider dashed={true}/>\n                                        <Descriptions title={Lang[this.state.lang].account.title.investDetail}>\n                                            <Descriptions.Item\n                                                label={Lang[this.state.lang].account.title.id}>{this.state.ct_details.id}</Descriptions.Item>\n                                            <Descriptions.Item\n                                                label={Lang[this.state.lang].account.title.referId}>{this.state.ct_details.referId}</Descriptions.Item>\n                                            <Descriptions.Item\n                                                label={Lang[this.state.lang].account.title.areaId}>{this.state.ct_details.largeAreaId}</Descriptions.Item>\n                                            <Descriptions.Item\n                                                label={Lang[this.state.lang].account.title.totalInvest}>{this.state.ct_details.amount}</Descriptions.Item>\n                                            <Descriptions.Item\n                                                label={Lang[this.state.lang].account.title.profitLevel}>{this.state.ct_details.profitLevel}</Descriptions.Item>\n                                            <Descriptions.Item\n                                                label={Lang[this.state.lang].account.title.latestTime}>{convertUTCDate(staticTimestamp)}</Descriptions.Item>\n                                        </Descriptions>\n                                    </Skeleton>\n                                </List.Item>\n\n                            </List>\n                        </div>\n\n                    </div>\n                </Content>\n\n                <SelectAccount visible={showAccountSelect} selectAccount={this.selectAccount}\n                               hiddenAccount={this.hiddenAccount}/>\n\n                <Modal\n                    title={Lang[this.state.lang].account.modal.deposit.title}\n                    visible={this.state.showDeposit}\n                    onCancel={this.handleCancel}\n                    footer={null}\n                    getContainer={false}\n                >\n                    <div style={{textAlign: \"center\"}}>\n                        <canvas id=\"qrImg\"></canvas>\n                        <p style={{wordBreak: 'normal', whiteSpace: 'pre-wrap', wordWrap: 'break-word'}}>\n                            <small>{this.state.currentAccount.MainPKr}</small></p>\n                        <Button className='copyTxt' onClick={() => {\n                            copy(this.state.currentAccount.MainPKr);\n                            message.success('Copy to clipboard successfully');\n                        }}>{Lang[this.state.lang].account.modal.deposit.copy}</Button>\n                    </div>\n                </Modal>\n\n                <BuyAsnowForm\n                    wrappedComponentRef={this.saveBuyAsnowFormRef}\n                    visible={this.state.showBuyAsnow}\n                    onCancel={this.handleBuyAsnowCancel}\n                    onCreate={this.handleBuyAsnowCreate}\n                    rate={this.state.ct_rate}\n                    lang={this.state.lang}\n                />\n\n                <InvestForm\n                    wrappedComponentRef={this.saveInvestFormRef}\n                    visible={this.state.showInvest}\n                    onCancel={this.handleInvestCancel}\n                    onCreate={this.handleInvestCreate}\n                    sero={this.state.balanceSero}\n                    asnow={this.state.ct_details.asnowBalances}\n                    calcuPrincipalProfit={this.calcuPrincipalProfit}\n                    rate={this.state.ct_rate}\n                    lang={this.state.lang}\n                    times={this.state.ct_details.profitLevel}\n                    referId={this.state.ct_details.referId}\n                />\n\n                <BuyTicketForm\n                    wrappedComponentRef={this.saveBuyTicketFormRef}\n                    visible={this.state.showBuyTicket}\n                    onCancel={this.handleBuyTicketCancel}\n                    onCreate={this.handleBuyTicketCreate}\n                    asnow={this.state.balanceAsnow}\n                    lang={this.state.lang}\n                />\n\n            </div>\n        );\n    }\n}\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            locale: zhCN,\n        };\n    }\n\n    componentWillMount() {\n        let lang = localStorage.getItem(\"lang\");\n        let locale = zhCN;\n        if (lang) {\n            if (lang === \"zh_CN\") {\n                locale = zhCN;\n            } else if (lang === \"en_US\") {\n                locale = enUS;\n            }\n        } else {\n            locale = zhCN;\n            localStorage.setItem(\"lang\", \"zh_CN\");\n        }\n\n        this.setState({\n            locale: locale\n        })\n    }\n\n    changeLocale = e => {\n        const localeValue = e.target.value;\n        this.setState({locale: localeValue});\n        console.log(localeValue.locale);\n        if (localeValue.locale === \"en\") {\n            localStorage.setItem(\"lang\", \"en_US\");\n        } else if (localeValue.locale === \"zh-cn\") {\n            localStorage.setItem(\"lang\", \"zh_CN\");\n        }\n    };\n\n    render() {\n        const {locale} = this.state;\n        return (\n            <div className=\"App\">\n                <Layout className=\"layout\">\n                    <Header className=\"header\">\n                        <div className=\"logo\"><img src={logo}/></div>\n                        <h1>HSGOLD</h1>\n                        <div className=\"change-locale\">\n                            <Radio.Group value={locale} onChange={this.changeLocale}>\n                                <Radio.Button key=\"en\" value={enUS}>\n                                    English\n                                </Radio.Button>\n                                <Radio.Button key=\"cn\" value={zhCN}>\n                                    中文\n                                </Radio.Button>\n                            </Radio.Group>\n                        </div>\n                    </Header>\n                    <ConfigProvider locale={locale}>\n                        <ContentPage key={locale ? locale.locale : 'en'}/>\n                    </ConfigProvider>\n                    <Footer style={{textAlign: 'center'}}/>\n                </Layout>\n            </div>\n        );\n    }\n}\n\nfunction convertUTCDate(dateTimestamp) {\n    if (dateTimestamp && dateTimestamp > 0) {\n        let cDate = new Date(dateTimestamp * 1000);\n        return appendZero(cDate.getMonth() + 1) + \"/\" + appendZero(cDate.getDate()) + \" \" + appendZero(cDate.getHours()) + \":\" + appendZero(cDate.getMinutes());\n    }\n    return \"\"\n}\n\nfunction nextShareTime() {\n    let d = new Date();\n    d.setTime(d.getTime() + 24 * 60 * 60 * 1000);\n    let year = d.getUTCFullYear();\n    let month = d.getUTCMonth();\n    let day = d.getUTCDate();\n    d = new Date(year, month, day, 0, 0, 0);\n\n    let tz = new Date().getTimezoneOffset() / 60;\n    return d.getTime() + (-tz) * 60 * 60 * 1000;\n}\n\nfunction appendZero(i) {\n    i = i < 10 ? \"0\" + i : i;\n    return i;\n}\n\nexport default App;\n\n","class Contract{\n\n    address = \"4yGoqEEz1cB27A3KubDML5DrqGP4B5pGT3KWHjrUz8b6hQ4qctKUsAty1MJWDHscmLpCgcTx6LEDHYhjeSRREFdB\";\n\n    abi = [{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refereeCode\",\"type\":\"string\"}],\"name\":\"invest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"detailsOfIncome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"triggerStaticProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMarketAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"details\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"registerNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conversionRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calcuStaticProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfSero\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"string\"}],\"name\":\"codeExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"paymentAsnow\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_triggerStaticNum\",\"type\":\"uint256\"}],\"name\":\"setTriggerStaticNum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfAsnow\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyAsnow\",\"outputs\":[{\"name\":\"asnowAmount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_marketAddr\",\"type\":\"address\"},{\"name\":\"_codeServiceAddr\",\"type\":\"address\"},{\"name\":\"_otherAddr\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}];\n\n}\n\nexport default Contract","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}